/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor;

import java.awt.Font;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
/**
 *
 * @author Ian James Fannon
 */
public class TextEditor extends javax.swing.JFrame {

    private LinkedList<String> lines = new LinkedList<>();
    private LinkedList<String> saveFile = new LinkedList<>();
    /**
     * Creates new form TextEditor
     */
    public TextEditor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        statusUpdateLabelRight = new javax.swing.JLabel();
        statusUpdateLabelLeft = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemNew = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemSaveAs = new javax.swing.JMenuItem();
        menuItemExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuItemCut = new javax.swing.JMenuItem();
        menuItemCopy = new javax.swing.JMenuItem();
        menuItemPaste = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuItemFont = new javax.swing.JMenuItem();
        menuItemTextWrap = new javax.swing.JCheckBoxMenuItem();
        menuHelp = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(new javax.swing.border.MatteBorder(null));
        jScrollPane1.setViewportView(jTextArea1);

        statusUpdateLabelRight.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        statusUpdateLabelRight.setText("jLabel1");

        jMenuBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        menuFile.setText("File");

        menuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuItemNew.setText("New");
        menuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewActionPerformed(evt);
            }
        });
        menuFile.add(menuItemNew);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuFile.add(jMenuItem1);

        menuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuItemSave.setText("Save");
        menuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSave);

        menuItemSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuItemSaveAs.setText("Save As");
        menuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSaveAs);

        menuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        jMenuBar1.add(menuFile);

        menuEdit.setText("Edit");

        menuItemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menuItemCut.setText("Cut");
        menuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCutActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemCut);

        menuItemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        menuItemCopy.setText("Copy");
        menuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCopyActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemCopy);

        menuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        menuItemPaste.setText("Paste");
        menuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPasteActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemPaste);

        jMenuBar1.add(menuEdit);

        menuView.setText("View");

        menuItemFont.setText("Font");
        menuItemFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFontActionPerformed(evt);
            }
        });
        menuView.add(menuItemFont);

        menuItemTextWrap.setSelected(true);
        menuItemTextWrap.setText("Text Wrap");
        menuItemTextWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTextWrapActionPerformed(evt);
            }
        });
        menuView.add(menuItemTextWrap);

        jMenuBar1.add(menuView);

        menuHelp.setText("Help");

        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menuHelp.add(jMenuItem2);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(statusUpdateLabelLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusUpdateLabelRight, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusUpdateLabelRight, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusUpdateLabelLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveAsActionPerformed
        JFileChooser save = new JFileChooser();
        
        if (save.showDialog(this, "Save As") == JFileChooser.APPROVE_OPTION) {
            try {
                PrintWriter infoToWrite = new PrintWriter(new BufferedWriter(new FileWriter(save.getSelectedFile())));
                saveFile.add(jTextArea1.getText());
                for (int i = 0; i < saveFile.size(); i++) {
                    infoToWrite.println(saveFile.get(i));
                }
                statusUpdateLabelLeft.setText("File Saved");
                infoToWrite.close();
            } catch (HeadlessException | FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Cannot Save File", "Error", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Cannot Save File", "Error", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Null Exception", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemSaveAsActionPerformed

    private void menuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewActionPerformed
        jTextArea1.setText("");
        statusUpdateLabelLeft.setText("New Document Opened");
    }//GEN-LAST:event_menuItemNewActionPerformed

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser fc = new JFileChooser();
        
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                String str = "";
                BufferedReader breader = new BufferedReader(new FileReader(fc.getSelectedFile().toString()));
                while ((str = breader.readLine()) != null) {
                    lines.add(str);
                
                    for (int i = 0; i < lines.size(); i++) {
                        System.out.println(lines.get(i));
                        jTextArea1.setText(lines.get(i));
                    }
                }
                statusUpdateLabelLeft.setText("File " + fc.getSelectedFile());
                breader.close();
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "An Error has occurred opening the file", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "An Error has occurred opening the file", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void menuItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCutActionPerformed
        if (!(jTextArea1.toString().isEmpty())) {
            jTextArea1.cut();
        }
    }//GEN-LAST:event_menuItemCutActionPerformed

    private void menuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCopyActionPerformed
        if (!(jTextArea1.toString().isEmpty())) {
            jTextArea1.copy();
        }
    }//GEN-LAST:event_menuItemCopyActionPerformed

    private void menuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPasteActionPerformed
        if (jTextArea1.toString().isEmpty()) {
            jTextArea1.paste();
            
        } else {
            jTextArea1.paste();
        }
    }//GEN-LAST:event_menuItemPasteActionPerformed

    private void menuItemFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemFontActionPerformed
        String fontType = JOptionPane.showInputDialog(this, "Enter Font type", "", JOptionPane.OK_CANCEL_OPTION);
        String fontSize = JOptionPane.showInputDialog(this, "Enter Font Size", "", JOptionPane.OK_CANCEL_OPTION);
        int size = Integer.parseInt(fontSize);
        Font font = new Font(fontType, Font.PLAIN, size);
        jTextArea1.setFont(font);
    }//GEN-LAST:event_menuItemFontActionPerformed

    private void menuItemTextWrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTextWrapActionPerformed
        if (menuItemTextWrap.isSelected()) {
            jTextArea1.setLineWrap(true);
        } else {
            jTextArea1.setLineWrap(false);
        }
    }//GEN-LAST:event_menuItemTextWrapActionPerformed

    private void menuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveActionPerformed
        JFileChooser save = new JFileChooser();
        
        if (save.showDialog(this, "Save") == JFileChooser.APPROVE_OPTION) {
            try {
                PrintWriter infoToWrite = new PrintWriter(new BufferedWriter(new FileWriter(save.getSelectedFile())));
                saveFile.add(jTextArea1.getText());
                for (int i = 0; i < saveFile.size(); i++) {
                    infoToWrite.println(saveFile.get(i));
                }
                statusUpdateLabelLeft.setText("File Saved");
                infoToWrite.close();
            } catch (HeadlessException | FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Cannot Save File", "Error", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Cannot Save File", "Error", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Null Exception", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemSaveActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JOptionPane.showMessageDialog(this, "This text editor was created by Ian Fannon and is free software.  Created on 2/04/2017");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemCopy;
    private javax.swing.JMenuItem menuItemCut;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemFont;
    private javax.swing.JMenuItem menuItemNew;
    private javax.swing.JMenuItem menuItemPaste;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JMenuItem menuItemSaveAs;
    private javax.swing.JCheckBoxMenuItem menuItemTextWrap;
    private javax.swing.JMenu menuView;
    private javax.swing.JLabel statusUpdateLabelLeft;
    private javax.swing.JLabel statusUpdateLabelRight;
    // End of variables declaration//GEN-END:variables

    
}
